{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","email","password","name","displayName","staySignedIn","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","register","src","width","onClick","onEmailChange","href","preventDefault","toLowerCase","login","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","sendPacket","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41440065.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket } from \"./chat\";\r\nimport { EventProducer } from \"./EventProducer\";\r\nimport {ProxyEventMap} from \"./ProxyEventMap\"\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\r\n        this.ws.addEventListener( \"open\", () =>\r\n        {\r\n        } );\r\n\r\n        this.ws.addEventListener( \"message\", e =>\r\n        {\r\n            let p = <IncomingPacket>JSON.parse( e.data );\r\n            switch ( p.type )\r\n            {\r\n                case \"error\":\r\n                    alert( p.message );\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    //alert(p.inbox)\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push( p.conversation );\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        } );\r\n    }\r\n\r\n    sendPacket( packet: OutgoingPacket )\r\n    {\r\n        this.ws.send( JSON.stringify( packet ) );\r\n    }\r\n\r\n    register(email: string, password: string, name: string) {\r\n        let message = JSON.stringify({ type: \"register\", email: email, password: password, displayName: name, staySignedIn: false });\r\n        this.ws.send(message);\r\n    }\r\n\r\n    login(email: string, password: string) {\r\n        let message = JSON.stringify({ type: \"login\", email: email, password: password, staySignedIn: false });\r\n        this.ws.send(message);\r\n    }\r\n}\r\nexport var proxy = new Proxy();","export class EventProducer<M>\r\n{\r\n    private listeners: { type: keyof(M), listener, obj?: Object }[] = [];\r\n    \r\n    addEventListener<K extends keyof M>( type: K, listener: M[K], obj?: Object )\r\n    {\r\n        this.listeners.push( { type, listener, obj } );\r\n    }\r\n\r\n    removeEventListener( type: string, listener )\r\n    {\r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\r\n    }\r\n\r\n    protected dispatch( type: string, ...args )\r\n    {\r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\r\n            listener.listener.call( listener.obj, ...args );\r\n    }\r\n\r\n    removeAllEventListener( obj: Object )\r\n    {\r\n        if ( !obj )\r\n          throw new Error( \"Must specify object\" );\r\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport './TextInput.css';\r\n\r\nexport interface TextInputOptions\r\n{\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n}\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = {value: this.props.value, focus: false};\r\n    render()\r\n    {\r\n        let attrs = {} as any;\r\n        if ( this.props.autofocus )\r\n            attrs.autoFocus = true;\r\n        if ( this.props.onEnter )\r\n            attrs.onKeyDown = e =>\r\n            {\r\n            if ( e.keyCode === 13 )\r\n                this.props.onEnter!();\r\n            };\r\n        return(\r\n                <div className=\"text-input\">\r\n                <input type={ this.props.type ?? \"text\" } value={ this.state.value }\r\n                onChange={ e =>\r\n                {\r\n                this.setState( { value: e.target.value } );\r\n                this.props.onChange?.( e.target.value );\r\n                } }\r\n                onBlur={ () => this.setState( { focus: false } ) }\r\n                onFocus={ () => this.setState( { focus: true } ) }\r\n                {...attrs} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n                { this.props.placeholder }\r\n                </label>\r\n                </div> \r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from './Proxy';\r\nimport { TextInput } from './TextInput';\r\n\r\nconst NEPTUN: string = \"PHW7QE\";\r\nconst FIRSTNAME: string = \"AAron\";\r\n\r\nexport class Login extends Component<{}, { email: string, password: string, displayName: string, register: boolean}>\r\n{\r\n    state = {email:\"\", password:\"\", displayName:\"\", register: false};\r\n    render()\r\n    {\r\n        return (\r\n            \r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                {this.state.register &&\r\n                <TextInput type=\"text\" placeholder=\"Display Name\" value={this.state.displayName}\r\n                onChange={e => this.setState({displayName: e})} onEnter={() => this.onClick()} autofocus={true}/>\r\n                }\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value = {this.state.email}\r\n                    onChange = {e=>{\r\n                        this.onEmailChange(e)\r\n                        this.setState({email:e})\r\n                    }}\r\n                    onEnter={() => this.onClick()} autofocus={true}/>\r\n                <TextInput type=\"password\" placeholder=\"Password\" value = {this.state.password} onChange={e=> this.setState({password:e})} onEnter={() => this.onClick()} autofocus={true} />\r\n                <button type=\"button\" onClick={()=> this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                    <a href=\"\" onClick={ e =>\r\n                        {\r\n                        e.preventDefault();\r\n                        this.setState( state => ( { register: !state.register } ) ); // pass a function instead of object\r\n                        } }>\r\n                        { this.state.register ? \"Login\" : \"Register\" }\r\n                    </a>\r\n                </p>\r\n            </div> );\r\n    }\r\n    onEmailChange(email:string)\r\n    {\r\n        if(email.toLowerCase() == NEPTUN.toLowerCase())\r\n            this.setState({displayName: FIRSTNAME})\r\n        \r\n    }\r\n    onClick()\r\n    {\r\n    if ( this.state.register )\r\n        proxy.register(this.state.email, this.state.password, this.state.displayName)\r\n    else\r\n        proxy.login(this.state.email, this.state.password)\r\n    }\r\n}","import { TextInputOptions, TextInput } from \"./TextInput\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n            this.textInput.current?.setState( { value: \"\" } );  \r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()}/>\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.props.buttonContent }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport { proxy } from './Proxy';\r\n\r\nexport class ConversationCard extends Component<{\r\nconversation: ConversationDto, selected:boolean,\r\nonSelect: () => void}>\r\n{\r\n    render()\r\n    {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0?\r\n        this.props.conversation.lastMessages[this.props.conversation.lastMessages.length-1]:null;\r\n        return(\r\n            <div className = {\"conversation-card\" + (this.props.selected? \"selected\":\"\")}\r\n            onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">{lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener(\"message\", (cid, m) =>\r\n        {\r\n            if(cid === this.props.conversation.channelId)\r\n            this.forceUpdate();\r\n        }, this);\r\n\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { InboxDto, ConversationDto } from './chat';\r\nimport {TextInputAndButton} from \"./TextInputAndButton\";\r\nimport { proxy } from './Proxy';\r\nimport {ConversationCard} from \"./ConversationCard\";\r\n\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox:InboxDto, selectedConversation: ConversationDto|undefined,\r\n    onSelect: (c: ConversationDto) => void}>\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={ text => this.sendContactRequest( text ) } />\r\n                <div className=\"conversations\">\r\n                    { this.props.inbox.conversations.map( x =>\r\n                        <ConversationCard\r\n                            key={ x.channelId }\r\n                            conversation={ x }\r\n                            selected={ x === this.props.selectedConversation }\r\n                            onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest(email:string)\r\n    {\r\n        proxy.sendPacket({type: \"contactRequest\", email, firstMessage:\"Hello\"});\r\n        return true;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n    proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n    proxy.removeAllEventListener( this );\r\n    }\r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{ this.props.message.content }</span>\r\n                    <span className=\"time\">\r\n                    { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {ConversationDto } from './chat';\r\nimport {proxy} from \"./Proxy\";\r\nimport {TextInputAndButton } from './TextInputAndButton';\r\nimport {MessageCard } from './MessageCard';\r\n\r\n\r\nexport class RightPane extends Component <{conversation?: ConversationDto, onBack: () => void}>\r\n{\r\n    componentDidMount(){\r\n        proxy.addEventListener(\"message\", (cid, m) => \r\n        {\r\n            if(cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text:string)\r\n    {\r\n        proxy.sendPacket({type:\"message\", \r\n            channelId:this.props.conversation!.channelId, \r\n            referenceTo:0, contentType:0, content:\"P: \"+text});\r\n        return true;\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                <>\r\n                    <div className=\"conversation-header row\">\r\n                        <button type=\"button\" className=\"only-narrow\"\r\n                        onClick={ () => this.props.onBack() }>\r\n                            Back\r\n                        </button>\r\n                        <p>{ this.props.conversation?.name }</p>\r\n                    </div>\r\n                    <div className = \"messages\">\r\n                        {this.props.conversation?.lastMessages.map(x=>\r\n                            <MessageCard key={x.id} message={x} own ={x.senderId === proxy.inbox?.user.id} />)}\r\n                    </div>\r\n                    <div className = \"send-message row\">\r\n                        <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                        buttonContent=\"Send\" onClick={x => this.onSend(x)}/>\r\n                    </div>\r\n                </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, {Component} from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport {proxy} from \"./Proxy\";\r\nimport {LeftPane} from \"./LeftPane\";\r\nimport {RightPane} from \"./RightPane\";\r\n\r\nexport class Main extends Component\r\n{\r\n    state = {selectedConversation: undefined as (ConversationDto|undefined)};\r\n\r\n    render()\r\n    {\r\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n        return (\r\n            <div className={ className }>\r\n                <LeftPane\r\n                    inbox={ proxy.inbox! }\r\n                    selectedConversation={ this.state.selectedConversation }\r\n                    onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n                <RightPane conversation={ this.state.selectedConversation }\r\n                    onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { proxy } from './Proxy';\r\nimport {Login} from './Login';\r\nimport { Main } from './Main';\r\n\r\nexport default class App extends Component\r\n{\r\n  state = {showLogin: true};\r\n  componentDidMount()\r\n  {\r\n    //this.checkWidth();\r\n    proxy.addEventListener( \"login\", () => {this.setState({showLogin:false}); this.forceUpdate();}, this );\r\n    //window.addEventListener(\"resize\", this.checkWidth.bind(this));\r\n  }\r\n  componentWillUnmount()\r\n  {\r\n    proxy.removeAllEventListener( this );\r\n    //window.removeEventListener(\"resize\",this.checkWidth);\r\n  }\r\n  render()\r\n  {\r\n    return(\r\n      <div className=\"app\">\r\n        {this.state.showLogin?<Login/>:<Main/>}\r\n      </div>\r\n    );\r\n    \r\n  }\r\n\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}